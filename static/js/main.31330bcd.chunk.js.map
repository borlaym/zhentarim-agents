{"version":3,"sources":["shuffle.ts","information.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["shuffle","originalArray","temporaryValue","randomIndex","array","Object","toConsumableArray","currentIndex","length","Math","floor","random","converted","randomAnswer","tooFarAway","nextTo","closeBy","change","mask","concat","wrongfulAccusation","answers","MAP_SIZE","INFO_DISTANCE","CONVERSION_RATE","MOVE_CHANCE","masks","Position","row","col","classCallCheck","this","modRow","modCol","pos","max","abs","guests","_this","filter","guest","distanceTo","position","App","state","turns","selected","undefined","information","wrongfulAccusations","nextTurn","currentTurn","_this2","occupiedSpaces","isOccupied","Boolean","find","space","equals","newTurn","map","type","push","oldPosition","possiblePositions","copy","newPosition","objectSpread","forEach","agent","commoner","setState","select","unmask","alert","slice","g","alreadyInvestigated","info","investigate","distances","targetAgentDistance","min","apply","neighboring","agents","closestAgent","indexOf","createInitialState","notShuffledAvailablePositions","availablePositions","i","pop","Error","id","uuid","c","target","table","turn","console","log","_this3","allSpaces","buildTable","selectedInformation","react","className","index","key","onClick","classnames","questionedThisRound","src","React","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31330bcd.chunk.js","sourcesContent":["export default function shuffle<T>(originalArray: T[]): T[] {\n    const array = [...originalArray];\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n","\n\nconst converted = () => randomAnswer([\n\t'I\\'m not telling you anything. They promised me good coin.',\n\t'Why would I tell you? Where were YOU when I needed help?',\n\t'I pledged my life to the Zhentarim. I\\'m not helping you.',\n\t'Yeah, they recruited me. Here\\'s a tip free of charge: you smell like an arse.',\n\t'Get lost! The Zhentarim will take care of me.',\n\t'I changed my allegiances from the Xanathar to the Zhentarim. But to YOU, I tell nothing.',\n\t'Leave me be! Maybe I should let my new bosses know someone is looking for them.',\n\t'I had no choice but to join up with the Zhentarim. Look at me, I haven\\'t eaten in days. It would be wrong to rat them out now.',\n\t'You are trying to interfere with their plans? I am proudly among their ranks now, so how about I give you a right thrashing instead?'\n]);\n\nconst tooFarAway = () => randomAnswer([\n\t'Zhentarim? Never heard of them.',\n\t'I haven\\'t seen any shady people, no, but would you like to dance?',\n\t'Hic! Tellya the truf I\\'m farily drunk.',\n\t'Haven\\'t seen no agent, now leave me be!',\n\t'An agent? I\\'m not an agent of Xanathar! Oh, you were asking about the Zhentarim? Haven\\'t seen one, no.',\n\t'I\\'ve been looking at this girl all night, I haven\\'t seen no shady figures, no.',\n\t'I think I saw one, but he was on the other side of the room.'\n])\n\nconst nextTo = () => randomAnswer([\n\t'This guy next to me is super suspicious!',\n\t'I just bumped into someone who fits that description!',\n\t'Psst! He\\'s RIGHT HERE! You would do the Xanathar... ehm, I mean the people, a great service if you killed him!',\n\t'See that guy behind my shoulders? Super shady!'\n]);\n\nconst closeBy = () => randomAnswer([\n\t'I think I saw a man with a snake tattoo not too far away!',\n\t'Yeah I saw the guy not long ago. He was quite handsome! Wanted to dance with him but he was caught up in a conversation.',\n\t'I overheard someone talking about the Zhentarim, trying to recruit into their ranks not far away!',\n\t'My eyes are not what they used to be, but I think I saw someone that fits that description.',\n\t'Looking for a Zhent agent? He he. Yeah, you don\\'t have to go far. Slip a dagger between his ribs, would ya, you would spare me the trouble.'\n]);\n\nconst change = (mask: string) => randomAnswer([\n\t`I saw a suspicious man change from a ${mask} mask not too long ago!`,\n\t`These woodland creatures are all so cute! Saw a man change his ${mask} mask to something else, guess he couldn\\'t choose!`,\n\t`When this man changed his ${mask} mask, I saw a snake tattoo reveal itself on his head!`,\n\t`A Zhent agent changed his ${mask} mask into something else not long ago, Quick! Get him!`\n])\n\nconst wrongfulAccusation = () => randomAnswer([\n\t'WHAT ARE YOU DOING? I\\'m calling the city watch!',\n\t'Get your hands off me! Who do you think you are?',\n\t'A man can\\'t have some fun without being harassed! I hate this city!',\n\t'Go back to your hideout you thug!',\n\t'Damn the Xanathar! Damn the Zhentarim! Damn this whole godforsaken city.'\n])\n\nfunction randomAnswer(answers: string[]): string {\n\tconst rnd = Math.floor(Math.random() * answers.length);\n\treturn answers[rnd];\n}\n\nexport {\n\tconverted,\n\ttooFarAway,\n\tnextTo,\n\tcloseBy,\n\tchange,\n\twrongfulAccusation\n}","import * as React from 'react';\nimport './App.css';\nimport shuffle from './shuffle';\nimport * as uuid from 'uuid';\nimport classnames from 'classnames'\nimport { converted, tooFarAway, nextTo, closeBy, change, wrongfulAccusation } from './information';\n\nconst NUMBER_OF_GUESTS = 35;\nconst NUMBER_OF_AGENTS = 3;\nconst MAP_SIZE = 10;\nconst STARTING_CONVERTED = 3;\nconst INFO_DISTANCE = 2;\nconst CONVERSION_RATE = 0.6; // What percentage the agents have to convert a bystander\nconst MOVE_CHANCE = 0.5; // What percentage the commoners have to move on a turn\n\ntype GuestType = 'commoner' | 'agent';\ntype Mask = 'bear' | 'rabbit' | 'fox';\nconst masks: Mask[] = ['bear', 'rabbit', 'fox'];\ntype Guest = {\n\tid: string,\n\ttype: GuestType,\n\tmask: Mask,\n\tconverted: Boolean,\n\tposition: Position\n}\n\ntype Information = {\n\tguest: Guest,\n\tinformation: string\n}\n\nclass Position {\n\trow: number;\n\tcol: number;\n\tconstructor(row: number, col: number) {\n\t\tthis.row = row;\n\t\tthis.col = col;\n\t}\n\tcopy(modRow: number, modCol: number): Position {\n\t\treturn new Position(this.row + modRow, this.col + modCol);\n\t}\n\tequals(pos: Position): boolean {\n\t\treturn this.row === pos.row && this.col === pos.col;\n\t}\n\tdistanceTo(pos: Position): number {\n\t\treturn Math.max(Math.abs(pos.row - this.row), Math.abs(pos.col - this.col))\n\t}\n\tneighboring(guests: Turn): number {\n\t\treturn guests.filter(guest => this.distanceTo(guest.position) === 1).length;\n\t}\n\n}\n\ntype Turn = Guest[];\n\ntype State = {\n\tturns: Turn[],\n\tselected: Guest | void,\n\tinformation: Information[],\n\twrongfulAccusations: number\n}\n\nclass App extends React.Component<{}, State> {\n\tstate: State = {\n\t\tturns: [],\n\t\tselected: undefined,\n\t\tinformation: [],\n\t\twrongfulAccusations: 0\n\t}\n\tcomponentWillMount() {\n\t\tthis.setState({\n\t\t\tturns: [this.createInitialState()]\n\t\t});\n\t}\n\tcreateInitialState(): Turn {\n\t\tconst guests: Turn = []\n\t\tconst notShuffledAvailablePositions: Position[] = [];\n\t\tfor (let row = 0; row < MAP_SIZE; row++) {\n\t\t\tfor (let col = 0; col < MAP_SIZE; col++) {\n\t\t\t\tnotShuffledAvailablePositions.push(new Position(row, col));\n\t\t\t}\n\t\t}\n\t\tconst availablePositions = shuffle(notShuffledAvailablePositions);\n\t\tfor (let i = 0; i < NUMBER_OF_GUESTS; i++) {\n\t\t\tconst pos = availablePositions.pop();\n\t\t\tif (!pos) {\n\t\t\t\tthrow Error()\n\t\t\t}\n\t\t\tguests.push({\n\t\t\t\tid: uuid.v4(),\n\t\t\t\ttype: 'commoner',\n\t\t\t\tmask: shuffle<Mask>(masks)[0],\n\t\t\t\tconverted: false,\n\t\t\t\tposition: pos\n\t\t\t})\n\t\t}\n\t\tfor (let i = 0; i < NUMBER_OF_AGENTS; i++) {\n\t\t\tconst pos = availablePositions.pop();\n\t\t\tif (!pos) {\n\t\t\t\tthrow Error()\n\t\t\t}\n\t\t\tguests.push({\n\t\t\t\tid: uuid.v4(),\n\t\t\t\ttype: 'agent',\n\t\t\t\tmask: shuffle<Mask>(masks)[0],\n\t\t\t\tconverted: false,\n\t\t\t\tposition: pos\n\t\t\t})\n\t\t}\n\t\t// Starting converted\n\t\tfor (let c = 0; c < STARTING_CONVERTED; c++) {\n\t\t\tconst unconverted = guests.filter(g => !g.converted);\n\t\t\tconst target = shuffle(unconverted)[0]\n\t\t\tguests[guests.indexOf(target)].converted = true;\n\t\t}\n\t\treturn guests;\n\t}\n\tbuildTable(): Array<Array<(Guest | null)>> {\n\t\tconst table: Array<Array<(Guest | null)>> = []\n\t\tfor (let row = 0; row < MAP_SIZE; row++) {\n\t\t\tconst row: Array<(Guest | null)> = []\n\t\t\tfor (let col = 0; col < MAP_SIZE; col++) {\n\t\t\t\trow.push(null)\n\t\t\t}\n\t\t\ttable.push(row)\n\t\t}\n\t\tconst turn: Turn = this.state.turns[this.state.turns.length - 1];\n\t\tif (!turn) {\n\t\t\tthrow Error()\n\t\t}\n\t\tturn.forEach((guest: Guest) => {\n\t\t\tif (!table[guest.position.row][guest.position.col]) {\n\t\t\t\ttable[guest.position.row][guest.position.col] = guest;\n\t\t\t} else {\n\t\t\t\tconsole.log('error: position duplicate')\n\t\t\t}\n\t\t})\n\t\treturn table;\n\t}\n\tnextTurn = () => {\n\t\tconst currentTurn: Turn = this.state.turns[this.state.turns.length - 1];\n\t\tconst occupiedSpaces: Position[] = [];\n\t\tconst isOccupied = (pos: Position): boolean => {\n\t\t\treturn Boolean(occupiedSpaces.find(space => space.equals(pos)));\n\t\t}\n\t\tconst newTurn = currentTurn.map((guest: Guest) => {\n\t\t\tif (guest.type !== 'agent' && Math.random() < MOVE_CHANCE && !isOccupied(guest.position)) {\n\t\t\t\toccupiedSpaces.push(guest.position)\n\t\t\t\treturn guest;\n\t\t\t}\n\t\t\tconst oldPosition = guest.position;\n\t\t\tconst possiblePositions = [\n\t\t\t\toldPosition.copy(-1, -1), oldPosition.copy(-1, 0), oldPosition.copy(-1, 1),\n\t\t\t\toldPosition.copy(0, -1), /* current pos */ oldPosition.copy(0, 1),\n\t\t\t\toldPosition.copy(1, -1), oldPosition.copy(1, 0), oldPosition.copy(1, 1),\n\t\t\t].filter(pos => {\n\t\t\t\treturn !pos.equals(oldPosition) && pos.row > -1 && pos.col > -1 && pos.row < MAP_SIZE && pos.col < MAP_SIZE && !isOccupied(pos)\n\t\t\t})\n\t\t\tif (possiblePositions.length === 0) {\n\t\t\t\toccupiedSpaces.push(guest.position)\n\t\t\t\treturn guest;\n\t\t\t}\n\t\t\tconst newPosition: Position = shuffle(possiblePositions)[0]\n\t\t\toccupiedSpaces.push(newPosition)\n\t\t\treturn {\n\t\t\t\t...guest,\n\t\t\t\tposition: newPosition,\n\t\t\t\tmask: guest.type === 'agent' ? shuffle(masks.filter(mask => mask !== guest.mask))[0] : guest.mask\n\t\t\t}\n\t\t})\n\t\t// The agents convert people\n\t\tconst agents = newTurn.filter(guest => guest.type === 'agent');\n\t\tagents.forEach(agent => {\n\t\t\tconst uncovertedCommoners = newTurn.filter(guest => guest.type === 'commoner' && !guest.converted);\n\t\t\tconst nextTo = uncovertedCommoners.filter(commoner => agent.position.distanceTo(commoner.position) === 1);\n\t\t\tif (nextTo.length > 0) {\n\t\t\t\tif (Math.random() < CONVERSION_RATE) {\n\t\t\t\t\tshuffle(nextTo)[0].converted = true;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tthis.setState({\n\t\t\tturns: [...this.state.turns, newTurn],\n\t\t\tselected: undefined,\n\t\t\tinformation: []\n\t\t})\n\t}\n\tselect = (guest: Guest) => {\n\t\tthis.setState({\n\t\t\tselected: guest\n\t\t})\n\t}\n\tunmask = () => {\n\t\tif (!this.state.selected) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.state.selected.type === 'agent') {\n\t\t\talert('Eeek! I\\'m compromised!');\n\t\t\treturn this.setState({\n\t\t\t\tselected: undefined,\n\t\t\t\tturns: [...this.state.turns.slice(0, this.state.turns.length - 1),\n\t\t\t\tthis.state.turns[this.state.turns.length - 1].filter(g => g !== this.state.selected)]\n\t\t\t})\n\t\t}\n\n\t\tconst alreadyInvestigated = this.state.information.find(info => info.guest === this.state.selected);\n\t\tif (alreadyInvestigated) {\n\t\t\treturn this.setState({\n\t\t\t\tinformation: this.state.information.map(info => {\n\t\t\t\t\tif (info === alreadyInvestigated) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...info,\n\t\t\t\t\t\t\tinformation: wrongfulAccusation()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn info\n\t\t\t\t}),\n\t\t\t\twrongfulAccusations: (this.state.wrongfulAccusations + 1)\n\t\t\t})\n\t\t}\n\t\tthis.setState({\n\t\t\tinformation: [...this.state.information, {\n\t\t\t\tguest: this.state.selected,\n\t\t\t\tinformation: wrongfulAccusation(),\n\t\t\t}],\n\t\t\twrongfulAccusations: (this.state.wrongfulAccusations + 1)\n\t\t})\n\t}\n\tinvestigate = () => {\n\t\tconst guest = this.state.selected;\n\t\tconst currentTurn = this.state.turns[this.state.turns.length -1]\n\t\tif (!guest) {\n\t\t\treturn;\n\t\t}\n\t\tlet info = 'No info';\n\t\tconst random = Math.random() * 100;\n\t\tif (guest.type === 'agent') {\n\t\t\tinfo = shuffle([tooFarAway(), nextTo(), closeBy(), closeBy(), tooFarAway()])[0];\n\t\t} else if (guest.converted) {\n\t\t\tinfo = converted();\n\t\t} else if (this.state.turns.length === 1 || random < 60) {\n\t\t\t// Distance to agent\n\t\t\tconst agents = currentTurn.filter(guest => guest.type === 'agent');\n\t\t\tconst distances = agents.map(agent => guest.position.distanceTo(agent.position))\n\t\t\tconst targetAgentDistance = Math.max(Math.min(...distances), 0)\n\t\t\tif (targetAgentDistance > INFO_DISTANCE) {\n\t\t\t\tinfo = tooFarAway()\n\t\t\t} else if (targetAgentDistance < 2 && guest.position.neighboring(currentTurn) > 1 && Math.random() < 0.7) {\n\t\t\t\tinfo = nextTo()\n\t\t\t} else {\n\t\t\t\tinfo = closeBy()\n\t\t\t}\n\t\t} else {\n\t\t\tconst previousRound = this.state.turns[this.state.turns.length -2];\n\t\t\tconst agents = previousRound.filter(guest => guest.type === 'agent');\n\t\t\tconst distances = agents.map(agent => guest.position.distanceTo(agent.position))\n\t\t\tconst targetAgentDistance = Math.max(Math.min(...distances), 0)\n\t\t\tif (targetAgentDistance > INFO_DISTANCE + 1) {\n\t\t\t\tinfo = tooFarAway();\n\t\t\t} else {\n\t\t\t\tconst closestAgent = agents[distances.indexOf(targetAgentDistance)];\n\t\t\t\tinfo = change(closestAgent.mask)\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tinformation: [...this.state.information, {\n\t\t\t\tguest,\n\t\t\t\tinformation: info\n\t\t\t}]\n\t\t})\n\t}\n\trender() {\n\t\tconst allSpaces = this.buildTable();\n\t\tconst selectedInformation = this.state.selected && this.state.information.find(info => info.guest === this.state.selected);\n\t\tconst currentTurn = this.state.turns[this.state.turns.length - 1];\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<table>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{allSpaces.map((row: Array<(Guest | null)>, index) => (\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t{row.map((col: Guest | null, index) => (\n\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\tonClick={col ? () => this.select(col) : undefined}\n\t\t\t\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\t\t\t\tselected: this.state.selected === col,\n\t\t\t\t\t\t\t\t\t\t\tquestionedThisRound: this.state.information.find(info => info.guest === col),\n\t\t\t\t\t\t\t\t\t\t\tconverted: col && col.converted,\n\t\t\t\t\t\t\t\t\t\t\tagent: col && col.type === 'agent'\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{col && <img src={`${col.mask}.png`} />}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t\t<div className=\"tools\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{this.state.selected && selectedInformation ? (\n\t\t\t\t\t\t\t\t<p className=\"quote\">\"{selectedInformation.information}\"</p>\n\t\t\t\t\t\t\t) : this.state.selected ? <button onClick={this.investigate}>Investigate</button>  : null}\n\t\t\t\t\t\t{this.state.selected && <button onClick={this.unmask}>Unmask</button>}\n\t\t\t\t\t</div>\n\t\t\t\t\t<footer>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tZhentarim agents remaining: {currentTurn.filter(guest => guest.type === 'agent').length}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tRecruited townsfolk: {currentTurn.filter(guest => guest.converted).length}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tWrongful accusations: {this.state.wrongfulAccusations}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<button onClick={this.nextTurn}>Next round</button>\n\t\t\t\t\t</footer>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}